enum{
	Nobody,
	Client,
	Attacker,
	Server,
	Hello,
	HelloRequest,
	KeyShare,
	ServerHello,
	ServerKeyShare,
	ServerEncryptedExtensions,
	ServerCertificateRequest,
	ServerCertificate,
	ServerCertificateSignature,
	ServerDone,
	Certificate,
	CertificateSignature,
	Done,
    client_server_key,
    attacker_server_key
};

var clientConnectedTo = Nobody;
var serverConnectedTo = Nobody;
var attacker_server_connected = false;


// This simple client-server model is based on the diagram found in the PDF

channel network 0;
channel attackerBuffer 10;

ClientProcess() = ClientNegotiate();

/*
	This client process makes an initial negotiation with the server
*/
ClientNegotiate() = 
	network!Client.Hello ->
	network!Client.KeyShare ->
	
	network?ServerHello ->
	network?ServerKeyShare ->
	network?ServerEncryptedExtensions ->
	
	(XReceiveCertRequest(Client)
	[]
	XReceiveServerCert(Client));

/*
	This client process makes an renegotiation with the server.
	This should only occur when a connection has already been established with the server
*/
ClientReNegotiate() = 
	network!client_server_key.Client.Hello ->
	network!client_server_key.Client.KeyShare ->
	
	network?client_server_key.ServerHello ->
	network?client_server_key.ServerKeyShare ->
	network?client_server_key.ServerEncryptedExtensions ->
	
	(XWithKeyYReceiveCertRequest(Client, client_server_key)
	[]
	XWithKeyYServerCert(Client, client_server_key));
	
	
/*
	This process is part of client negotiation.
	This occurs when the client receives a Certificate Request from the server.
	
	x refers to the type of client involved.
	x can either be a real client or an attacker.
*/
XReceiveCertRequest(x) =
	network?ServerCertificateRequest -> 
	network?ServerCertificate ->	
	network?ServerCertificateSignature ->	
	network?ServerDone ->
	network!x.Certificate ->
	network!x.CertificateSignature ->
	network!x.Done ->
	ClientConnected(x);

/*
	This process is part of client negotiation.
	This occurs when the client *does not* receive a Certificate Request from the server.
	
	x refers to the type of client involved.
	x can either be a real client or an attacker.
*/
XReceiveServerCert(x) = 
	network?ServerCertificate ->
	network?ServerCertificateSignature ->
	network?ServerDone ->	
	network!x.Done ->
	ClientConnected(x);

/*
	This process is part of client renegotiation.
	This occurs when the client receives a Certificate Request from the server.
	
	x refers to the type of client involved.
	x can either be a real client or an attacker.
	
	y refers to the key used for the encrypted message
	y can either be client_server_key or attacker_server_key
*/
XWithKeyYReceiveCertRequest(x,y) =
	network?y.ServerCertificateRequest -> 
	network?y.ServerCertificate ->	
	network?y.ServerCertificateSignature ->	
	network?y.ServerDone ->
	network!y.x.Certificate ->
	network!y.x.CertificateSignature ->
	network!y.x.Done ->
	ClientConnected(x);

/*
	This process is part of client renegotiation.
	This occurs when the client *does not* receive a Certificate Request from the server.
	
	x refers to the type of client involved.
	x can either be a real client or an attacker.
	
	y refers to the key used for the encrypted message.
	y can either be client_server_key or attacker_server_key
*/
XWithKeyYServerCert(x,y) = 
	network?y.ServerCertificate ->
	network?y.ServerCertificateSignature ->
	network?y.ServerDone ->	
	network!y.x.Done ->
	ClientConnected(x);

/*
	This client process occurs once the TLS/SSL handshake is complete
	It waits for a HelloRequest from the server to start a client renegotiation process
*/
ClientConnected(x) = 
    if (x == Client) {
       clientConnected{ clientConnectedTo = Server } -> 
       network?client_server_key.HelloRequest -> ClientReNegotiate()
   	}
    else {
       attackerconnected{ attacker_server_connected = true } ->
       network?attacker_server_key.HelloRequest -> AttackerProcess()
    };

ServerProcess() = ServerNegotiate();

ServerNegotiate() = 
	network?x.Hello ->
	network?x.KeyShare ->
	
	network!ServerHello ->
	network!ServerKeyShare ->
	network!ServerEncryptedExtensions ->

	(ServerRequestCert() 
	[]
	ServerSendCert());
	
ServerReNegotiate(y) = 
	network?y.x.Hello ->
	network?y.x.KeyShare ->
	
	network!y.ServerHello ->
	network!y.ServerKeyShare ->
	network!y.ServerEncryptedExtensions ->

	(ServerRequestCertWithKeyY(y) 
	[]
	ServerSendCertWithKeyY(y));	
		
ServerRequestCert() = 
	network!ServerCertificateRequest -> 
	network!ServerCertificate ->	
	network!ServerCertificateSignature ->	
	network!ServerDone ->
	network?x.Certificate ->
	network?x.CertificateSignature ->
	network?x.Done ->	
	serverconnected{serverConnectedTo = x} ->
	ServerConnected(x);
	
ServerSendCert() = 
	network!ServerCertificate ->
	network!ServerCertificateSignature ->
	network!ServerDone ->	
	network?x.Done ->
	serverconnected{serverConnectedTo = x} ->
	ServerConnected(x);
	
ServerRequestCertWithKeyY(y) = 
	network!y.ServerCertificateRequest -> 
	network!y.ServerCertificate ->	
	network!y.ServerCertificateSignature ->	
	network!y.ServerDone ->
	network?y.x.Certificate ->
	network?y.x.CertificateSignature ->
	network?y.x.Done ->	
	serverconnected{serverConnectedTo = x} ->
	ServerConnected(x);
	
ServerSendCertWithKeyY(y) = 
	network!y.ServerCertificate ->
	network!y.ServerCertificateSignature ->
	network!y.ServerDone ->	
	network?y.x.Done ->
	serverconnected{serverConnectedTo = x} ->
	ServerConnected(x);


ServerConnected(x) = 
	if (x == Client) {
    	network!client_server_key.HelloRequest -> ServerReNegotiate(client_server_key)
   	}
   	else {
       	network!attacker_server_key.HelloRequest -> ServerReNegotiate(attacker_server_key)
   	};

/*
	This attacker process negotiates with the server as a "Client"
*/
AttackerNegotiate() = 
	network!Attacker.Hello ->
	network!Attacker.KeyShare ->
	
	network?ServerHello ->
	network?ServerKeyShare ->
	network?ServerEncryptedExtensions ->
	
	(XReceiveCertRequest(Attacker)
	[]
	XReceiveServerCert(Attacker));

/*
	This attacker process renegotiates with the server as a "Client"
*/
AttackerReNegotiate() = 
	network!attacker_server_key.Attacker.Hello ->
	network!attacker_server_key.Attacker.KeyShare ->
	
	network?attacker_server_key.ServerHello ->
	network?attacker_server_key.ServerKeyShare ->
	network?attacker_server_key.ServerEncryptedExtensions ->
	
	(XWithKeyYReceiveCertRequest(Attacker, attacker_server_key)
	[]
	XWithKeyYServerCert(Attacker, attacker_server_key));


/*
	This attacker process acts as server by
	receiving messages from the client and 
	putting the messages into its buffer 
*/ 
AttackerAsServer() = 
	network?Client.Hello ->
	attackerBuffer!Client.Hello ->
	network?Client.KeyShare ->
	attackerBuffer!Client.KeyShare ->
	AttackerProcess();

/*
	This attacker process acts as a relay. This is both a "server" and a "client"
	It does one of four things:
	1. Intercepts (client-to-server) message from the network and put it in its buffer
	2. Reads message from its buffer and sends it as an encrypted message to the server
	3. Reads encrypted message from the server and sends the decrypted message to the client
	4. Intercepts (client-to-server) message from the network and sends it as an encrypted message to the server
*/
AttackerRelay() = attackerBuffer?x.z -> network!attacker_server_key.x.z -> AttackerProcess() // 2
               [] network?x.z -> attackerBuffer!x.z -> AttackerProcess() // 1
               [] network?attacker_server_key.z -> network!z -> AttackerProcess() // 3
               [] network?x.z -> network!attacker_server_key.x.z -> AttackerProcess(); //4

AttackerProcess() = AttackerNegotiate() [] AttackerReNegotiate() [] AttackerAsServer() [] AttackerRelay();
SystemMultipleClient() = ClientProcess() ||| ServerProcess() ||| AttackerProcess();
SystemRegularClient() = ClientProcess() ||| ServerProcess();
SystemAttackerClient() = AttackerProcess() ||| ServerProcess();

#define client_server_connected clientConnectedTo == Server && serverConnectedTo == Client;
#define violation attacker_server_connected == true && client_server_connected;
#assert SystemMultipleClient deadlockfree;
#assert SystemRegularClient deadlockfree;
#assert SystemAttackerClient deadlockfree;
#assert SystemRegularClient reaches client_server_connected;
#assert SystemMultipleClient reaches violation;

enum{
	Nobody,
	Client,
	Attacker,
	Hello,
	KeyShare,
	ServerHello,
	ServerKeyShare,
	ServerEncryptedExtensions,
	ServerCertificateRequest,
	ServerCertificate,
	ServerCertificateSignature,
	ServerDone,
	Certificate,
	CertificateSignature,
	Done
};

var connectedClient = Nobody;
var serverConnectedTo = Nobody;

// This simple client-server model is based on the diagram found in the PDF

channel network 0;

ClientProcess() = 
	network!Client.Hello ->
	network!Client.KeyShare ->
	
	network?ServerHello ->
	network?ServerKeyShare ->
	network?ServerEncryptedExtensions ->
	
	(ClientReceiveCertRequest(Client)
	[]
	ClientReceiveServerCert(Client));

ClientReceiveCertRequest(x) =
	network?ServerCertificateRequest -> 
	network?ServerCertificate ->	
	network?ServerCertificateSignature ->	
	network?ServerDone ->
	network!x.Certificate ->
	network!x.CertificateSignature ->
	network!x.Done ->	
	ClientConnected(x);

ClientReceiveServerCert(x) = 
	network?ServerCertificate ->
	network?ServerCertificateSignature ->
	network?ServerDone ->	
	network!x.Done ->
	ClientConnected(x);

ClientConnected(x) = clientconnected{connectedClient = x} -> ClientConnected(x);


AttackerClientProcess() = 
	network!Attacker.Hello ->
	network!Attacker.KeyShare ->
	
	network?ServerHello ->
	network?ServerKeyShare ->
	network?ServerEncryptedExtensions ->
	
	(ClientReceiveCertRequest(Attacker)
	[]
	ClientReceiveServerCert(Attacker));


ServerProcess() = 
	network?x.Hello ->
	network?x.KeyShare ->
	
	network!ServerHello ->
	network!ServerKeyShare ->
	network!ServerEncryptedExtensions ->

	(ServerRequestCert() 
	[]
	ServerSendCert());
		
ServerRequestCert() = 
	network!ServerCertificateRequest -> 
	network!ServerCertificate ->	
	network!ServerCertificateSignature ->	
	network!ServerDone ->
	network?x.Certificate ->
	network?x.CertificateSignature ->
	network?x.Done ->	
	ServerConnected(x);
	
ServerSendCert() = 
	network!ServerCertificate ->
	network!ServerCertificateSignature ->
	network!ServerDone ->	
	network?x.Done ->
	ServerConnected(x);
	

ServerConnected(x) = serverconnected{serverConnectedTo = x} -> ServerConnected(x);

System() = ClientProcess() ||| ServerProcess() ||| AttackerClientProcess();

#assert System deadlockfree;